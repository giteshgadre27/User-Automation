<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="9" passed="8" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-05-16T11:44:42 IST" name="Suite" finished-at="2024-05-16T11:44:58 IST" duration-ms="16256">
    <groups>
    </groups>
    <test started-at="2024-05-16T11:44:42 IST" name="Test" finished-at="2024-05-16T11:44:58 IST" duration-ms="16256">
      <class name="api.test.UserTestCases">
        <test-method is-config="true" signature="setupData()[pri:0, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:43 IST" name="setupData" finished-at="2024-05-16T11:44:43 IST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupData -->
        <test-method signature="testPostUser()[pri:1, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:43 IST" name="testPostUser" finished-at="2024-05-16T11:44:48 IST" duration-ms="5101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPostUser -->
        <test-method signature="testGetUser()[pri:2, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:48 IST" name="testGetUser" finished-at="2024-05-16T11:44:50 IST" duration-ms="2210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetUser -->
        <test-method signature="testUpdateUser()[pri:3, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:50 IST" name="testUpdateUser" finished-at="2024-05-16T11:44:52 IST" duration-ms="1133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUser -->
        <test-method signature="testUpdateUserPassword()[pri:4, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:52 IST" name="testUpdateUserPassword" finished-at="2024-05-16T11:44:53 IST" duration-ms="1114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUserPassword -->
        <test-method signature="testDeleteUser()[pri:5, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:53 IST" name="testDeleteUser" finished-at="2024-05-16T11:44:54 IST" duration-ms="1079" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteUser -->
        <test-method signature="testGetNonExistingUser()[pri:6, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:54 IST" name="testGetNonExistingUser" finished-at="2024-05-16T11:44:55 IST" duration-ms="1111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNonExistingUser -->
        <test-method signature="testCreateUserWithMinimumFields()[pri:7, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:55 IST" name="testCreateUserWithMinimumFields" finished-at="2024-05-16T11:44:56 IST" duration-ms="1132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUserWithMinimumFields -->
        <test-method signature="testCreateUserWithMaximumFields()[pri:8, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:56 IST" name="testCreateUserWithMaximumFields" finished-at="2024-05-16T11:44:57 IST" duration-ms="1158" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUserWithMaximumFields -->
        <test-method signature="testCreateUserWithInvalidEmail()[pri:9, instance:api.test.UserTestCases@126253fd]" started-at="2024-05-16T11:44:57 IST" name="testCreateUserWithInvalidEmail" finished-at="2024-05-16T11:44:58 IST" duration-ms="1148" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <400> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <400> but was <200>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:143)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at api.test.UserTestCases.testCreateUserWithInvalidEmail(UserTestCases.java:177)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUserWithInvalidEmail -->
      </class> <!-- api.test.UserTestCases -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
